
1 - Função ft_str_is_lowercase:  int ft_str_is_lowercase(char *str)

    Verifica se todos os caracteres de uma string são letras minúsculas.

    1.1 - Tipo de Retorno:  int
          
          A função retorna um inteiro, que será 1 (verdadeiro) se todos os caracteres da string forem minúsculas e 0 (falso) caso contrário.

    1.2 - Variáveis:

          char *str: o parâmetro str é um ponteiro para uma array de caracteres (string) que aponta para o primeiro caractere da string que está a ser verificada.
                     Quando passamos a string para a função, o valor que str recebe é o endereço de memória onde o primeiro caractere da string está armazenado.
                     Durante a execução do loop while, a função utiliza str[i] para acessar o caractere na posição i da string.

                     Exemplo:

                     char str[] = "hello";
                     ft_str_is_lowercase(str);

                     Se a string "hello" for passada para a função, o ponteiro str aponta para o endereço da memória onde está armazenado o primeiro caractere 'h'. Então:

                     str[0] acessa 'H'
                     str[1] acessa 'e'
                     str[2] acessa 'l'
                     str[3] acessa 'l'
                     str[4] acessa 'o'
                     str[5] acessa o caractere nulo '\0', que indica o fim da string.

          int i: é um contador que controla o loop while.
                 Ela é utilizada para percorrer cada caractere da string, desde o primeiro até ao último (antes do caractere nulo).
                 O valor de i vai ser incrementado, em cada iteração de modo a que str[i] acesse todos os caracteres do array, até que a função tenha verificado todos os caracteres ou até encontrar um caractere que não seja minúsculo.
                 
                 No início, i é inicializado com 0, indicando que estamos a acessar o primeiro caractere da string (posição str[0]).

                 Cada vez que o loop é executado, i é incrementado (i++), o que faz a função verificar o próximo caractere da string na posição str[i+1].
                


2 - Loop para Percorrer a String: 

            while (str[i] != '\0')
            {
                if (!(str[i] >= 'a' && str[i] <= 'z'))
                    return (0);
                i++;
            }
            return (1);

    
    Aqui, vamos percorrer cada caractere da string até encontrar o caractere nulo '\0', que indica o final da string.

    A cada iteração do loop, vamos verificar se o caractere atual é uma letra minúscula.

    Exemplo:

    Vamos supor que a string seja "hello":

    Valor de i	    str[i]	         Explicação
        0	         'h'	        O loop continua
        1	         'e'	        O loop continua
        2	         'l'	        O loop continua
        3	         'l'	        O loop continua
        4	         'o'	        O loop continua
        5	         '\0'	        O loop para

    A variável i começa em 0, e o loop vai se repetir até que o valor de str[i] seja '\0', o que marca o fim da string.

3 . Verificação do Caractere Atual:  if (!(str[i] >= 'a' && str[i] <= 'z'))
    
    Dentro do loop, usamos a condição if para verificar se o caractere atual (str[i]) não é uma letra minúscula.

    Se a condição for verdadeira, isso significa que str[i] não é uma letra minúscula, e a função retorna 0, indicando que a string contém outros caracteres que não são letras minúsculas.

    Exemplo:

    Suponhamos que a string seja "helloA". Vamos analisar os primeiros caracteres:

    i	 str[i]	   Minúscula? ('a' a 'z')    Negação ! (Não é Minúsculo)	   Ação
    0	  'h'	            Sim	                     Não	                  Continua
    1	  'e'	          	Sim	                     Não	                  Continua
    2	  'l'	          	Sim	                     Não	                  Continua
    3	  'l'	            Sim	                     Não	                  Continua
    4	  'o'	            Sim	                     Não	                  Continua
    5	  'A'	            Não	                     Sim	                  Retorna 0

    Para os caracteres 'h', 'e', 'l', 'l', e 'o', a função continua normalmente, porque todos são letras minúsculas.

    Quando chega ao caractere 'A', ele não é uma letra minúscula. 
    A condição ! torna verdadeira, e a função imediatamente retorna 0, indicando que a string contém caracteres que não são letras minúsculas.

    Assim, se o if determinar que o caractere str[i] não é uma letra minúscula, a função retorna 0. 
    Isto indica que a string contém um ou mais caracteres não minúsculos, e a verificação termina imediatamente.

4 - Incremento do Índice i:  i++

    Se o caractere atual for uma letra minúscula, o índice i é incrementado para verificar o próximo caractere da string.

    Depois de verificar o caractere atual str[i], e se for uma letra minúscula, o índice i é incrementado para verificar o próximo caractere da string. 
    Isto significa que i agora aponta para o próximo caractere da string.
    O incremento de i ocorre após a verificação de cada caractere.
    Isso faz com que o próximo caractere seja verificado na próxima iteração do loop while.

5. Retorno da Função:  return (1);

    Se o loop while terminar sem encontrar nenhum caractere que não seja uma letra minúscula, significa que todos os caracteres da string foram verificados e todos eram minúsculos. 
    Assim, a função retorna 1, indicando que a string é composta apenas por caracteres minúsculos.


    Resumindo:

    O loop while começa com i = 0 e str[i] acessa o primeiro caractere da string.
    A cada iteração, a função verifica se o caractere atual str[i] é uma letra minúscula (usando a condição if (!(str[i] >= 'a' && str[i] <= 'z'))).
    Se o caractere é uma letra minúscula, o valor de i é incrementado, e a função continua a verificar o próximo caractere.
    O laço termina quando str[i] é igual a '\0' (fim da string), o que indica que todos os caracteres foram verificados.

    Se algum caractere não for uma letra minúscula, a função retorna 0 imediatamente, e a verificação é interrompida. 
    Caso contrário, ao final do loop, a função retorna 1, o que indica que todos os caracteres da string são letras minúsculas.



Exemplo de Fluxo:

1) Antes da Função:

   
   > Função Main

        int main(void)
        {
            char str[] = "hello";
            int result;

            result = ft_str_is_lowercase(str);
            return 0;
        }

      
      O que Acontece na Memória Antes da Chamada da Função:

        Declaração de str[]: Quando a string "hello" é declarada na main, ela é armazenada num bloco de memória (a string é alocada na memória).
        
        A string em C é um array de caracteres, então "hello" será armazenada como os caracteres 'h', 'e', 'l', 'l', 'o', seguidos pelo caractere nulo '\0' que marca o fim da string.
        
        O array str[] é passado como um ponteiro para a função, ou seja, o endereço de memória do primeiro caractere ('h') é o que será passado para a função ft_str_is_lowercase.

        Exemplo de Memória:

        Índice de str	Caractere	Valor ASCII	   Endereço de Memória
             0	          'h'	        72	            0x1000
             1	          'e'	        101	            0x1001
             2	          'l'	        108	            0x1002
             3	          'l'	        108	            0x1003
             4	          'o'	        111	            0x1004
             5	          '\0'	         0	            0x1005

        O array str[] contém a string "hello" com o caractere nulo no final e é armazenado a partir do endereço de memória 0x1000.
        O ponteiro str que será passado para a função ft_str_is_lowercase aponta para o endereço de memória do primeiro caractere, ou seja, 0x1000, onde está o caractere 'h'.

        Quando a função ft_str_is_lowercase(str) é chamada, o ponteiro str (que contém o endereço 0x1000) é passado como argumento, ou seja, a função recebe o endereço de memória onde o array começa. 
        Isto significa que, dentro da função ft_str_is_lowercase, a variável str (o parâmetro da função) terá o valor 0x1000, que aponta para o primeiro caractere da string ('h').

  
2) Durante a Função:

            while (str[i] != '\0')
	        {
		        if (!(str[i] >= 'a' && str[i] <= 'z'))
			        return (0);
		        i++;
	        }
	        return (1);
   
   Na função, a variável i é inicializada com 0:  int i = 0

   Esta variável i será usada como índice para acessar os caracteres da string str.

  > Primeira Iteração do while: 
   
    Condição do while: while (str[i] != '\0')

    Neste ponto, str[0] é 'h', ou seja, str[0] != '\0', então o loop continua.

    Verificação do if:  if (!(str[i] >= 'a' && str[i] <= 'z'))

    Aqui, str[0] é 'h', que está entre 'a' e 'z', então o caractere é uma letra minúscula. 
    O if não é verdadeiro, e o loop continua.

    Incremento de i:  i++;

    Agora i passa a ser 1.

    Estado da Memória e Variáveis Após a Primeira Iteração:

    Iteração	i	str[i]	  Endereço str[i]	Condição if (Letra?)	Próximo i
       1	    0	  'h'	      0x1000	          Sim	               1
       
  > Segunda Iteração do while (i = 1)

    Condição do while: Aqui, str[1] é 'e', então o loop continua.

    Verificação do if: str[1] é 'e', que está entre 'a' e 'z', então é uma letra minúscula. 
    O if não é verdadeiro, e o loop continua.

    Incremento de i: Agora i passa a ser 2.

    Estado da Memória e Variáveis Após a Segunda Iteração:

    Iteração	i	 str[i]	   Endereço str[i]	 Condição if (Letra?)	Próximo i
       1	    0	   'h'	       0x1000	              Sim	            1
       2     	1	   'e'         0x1001                 Sim            	2

  > Terceira Iteração do while (i = 2)

    Condição do while: str[2] é 'l', então o loop continua.

    Verificação do if:  str[2] é 'l', que está entre 'a' e 'z', então é uma letra minúscula. O if não é verdadeiro, e o loop continua.

    Incremento de i: Agora i passa a ser 3.

    Estado da Memória e Variáveis Após a Terceira Iteração:

    Iteração	i	 str[i]	   Endereço str[i]    Condição if (Letra?)	Próximo i
       1	    0	  'h'	        0x1000	              Sim	           1
       2	    1	  'e'	        0x1001	              Sim	           2
       3	    2  	  'l'	        0x1002	              Sim	           3

  > Quarta Iteração do while (i = 3)

    Condição do while: str[3] é 'l', então o loop continua.

    Verificação do if: str[3] é 'l', que está entre 'a' e 'z', então é uma letra minúscula. O if não é verdadeiro, e o loop continua.

    Incremento de i: Agora i passa a ser 4.

    Estado da Memória e Variáveis Após a Quarta Iteração:

    Iteração	i	str[i]	   Endereço str[i]	 Condição if (Letra?)	Próximo i
        1	    0	 'h'	        0x1000	             Sim	            1
        2	    1	 'e'	        0x1001	             Sim	            2
        3	    2	 'l'	        0x1002	             Sim	            3
        4	    3	 'l'	        0x1003	             Sim	            4

  > Quinta Iteração do while (i = 4)

    Condição do while: str[4] é 'o', então o loop continua.

    Verificação do if:  str[4] é 'o', que está entre 'a' e 'z', então é uma letra minúscula. O if não é verdadeiro, e o loop continua.

    Incremento de i: Agora i passa a ser 5.

    Estado da Memória e Variáveis Após a Quinta Iteração:
    
    Iteração	i	str[i]	  Endereço str[i]	Condição if (Letra?)	Próximo i
       1	    0	 'h'	     0x1000	                Sim	                1
       2	    1	 'e'	     0x1001	                Sim	                2
       3	    2	 'l'	     0x1002	                Sim	                3
       4	    3	 'l'       	 0x1003	                Sim	                4
       5	    4	 'o'	     0x1004	                Sim	                5

  > Sexta Iteração do while (i = 5)

    Condição do while: str[5] é '\0', que indica o fim da string. O loop termina e a função retorna 1, indicando que a string contém apenas letras minúsculas.


3) De Volta à Main:
   
   Depois que a função ft_str_is_lowercase retorna, o fluxo volta para a função main, onde o valor retornado pela função é armazenado na variável result.

   result = ft_str_is_lowercase(str);  // result agora é 1

   A variável result agora contém o valor 1, que indica que a string "hello" é composta apenas por letras minúsculas.
   
   > Estado da Memória Após a Execução da Função:

      Variável	Valor	Endereço
        str	   "hello"	 0x1000
       result	  1	     0x2000